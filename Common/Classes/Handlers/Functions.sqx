/*
 * Name:	Functions
 * Date:	2020-09-18
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Common functions.
 */
namespace Tvtcf.Common
{
	public class Functions
	{
		// Uses the smallest quadrant method to find the position closest to all counted markers.
		// _markers (Array): All markers that should count.
		public static method Array FindClosestToMarkersPos("_markers" as Array)
		{
			private ["_topX" as Scalar, "_topY" as Scalar, "_bottomX" as Scalar, "_bottomY" as Scalar];
			private ["_bestPos" as Array, "_quadrantValue" as Scalar, "_bestQuadrantValue" as Scalar];
			
			if (count _markers == 0) then {
				return [];
			};
			
			_topX = getMarkerPos (_markers select 0) select 0;
			_topY = getMarkerPos (_markers select 0) select 1;
			_bottomX = getMarkerPos (_markers select 0) select 0;
			_bottomY = getMarkerPos (_markers select 0) select 1;
			
			{
				private _pos = getMarkerPos _x;
				
				if (_pos select 0 < _topX) then {
					_topX = _pos select 0;
				};
				if (_pos select 0 > _bottomX) then {
					_bottomX = _pos select 0;
				};
				if (_pos select 1 < _bottomY) then {
					_bottomY = _pos select 1;
				};
				if (_pos select 1 > _topY) then {
					_topY = _pos select 1;
				};
			} foreach _markers as String;
			
			private _xx = _topX;
			
			_bestQuadrantValue = -1;
			_bestPos = [_topX, _topY, 0];
			
			while { _xx < _bottomX } do
			{
				private _y = _topY;
				
				while { _y > _bottomY } do
				{
					_quadrantValue = 0;
					
					{
						_quadrantValue = _quadrantValue + (([_xx, _y] distance2D (getMarkerPos _x)) / 1000) ^ 2;
					} foreach _markers as String;
					
					if (_bestQuadrantValue < 0 || _quadrantValue < _bestQuadrantValue) then
					{
						_bestQuadrantValue = _quadrantValue;
						_bestPos = [_xx, _y, 0];
					};
					
					_y = _y - 200;
				};
				
				_xx = _xx + 200;
			};
			
			return _bestPos;
		};
		
		public static method Scalar GetMissionTime()
		{
			if (isMultiplayer) then {
				return serverTime;
			};
			
			return time;
		};
		
		public static method String StringReplace("_str" as String, "_find" as String, "_replace" as String)
		{
		    private _return = "";
		    private _len = count _find;    
		    private _pos = _str find _find;
		
		    while {(_pos != -1) && (count _str > 0)} do
		    {
		        _return = _return + (_str select [0, _pos]) + _replace;
		        
		        _str = (_str select [_pos+_len]);
		        _pos = _str find _find;
		    };
		    
		    return _return + _str;
		};
		
		public static method ShuffleArray("_array" as Array)
		{
			for "_i" from 0 to (count _array) * 2 do
			{
				private _index1 = floor random count _array;
				private _index2 = floor random count _array;
				
				if (_index1 != _index2) then
				{
					var _item = _array select _index1;
					_array set [_index1, _array select _index2];
					_array set [_index2, _item];
				};
			};
		};
	};
};
