/*
 * Name:	PerformInsertionService
 * Date:	2020-06-30
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Service that handles a group's insertion before executing a mission.
 */

using Sqx.Services;
using Tvtcf.Communication;
using Tvtcf.Common.Statics;
using Tvtcf.Common;
using Josef.Common;

namespace Tvtcf.Client
{
	public class PerformInsertionService : Service
	{
		private fields ["_mWaitingForMapClick" as Boolean, "_mMapPos" as Array, "_mInsertionMarkers" as Array, "_mMessageHandler" as ClientMessageHandler, "_mMapMarkerHandler" as MapMarkerHandler];
	
		// Creates a PerformInsertionService object.
		public constructor("_messageHandler" as ClientMessageHandler, "_mapMarkerHandler" as MapMarkerHandler)
		{
			call _base.Constructor;
			_mMessageHandler = _messageHandler;
			_mMapMarkerHandler = _mapMarkerHandler;
		};
		
		public method Reset("_insertionMarkers" as Array /* of String */)
		{
			_mWaitingForMapClick = true;
			_mMapPos = [];
			_mInsertionMarkers = _insertionMarkers;
		};
		
		public method SendMapClick("_position" as Array)
		{
			_mMapPos = _position;
			_mWaitingForMapClick = false;
		};
		
		private method Boolean InAnyMarker("_position" as Array, "_markers" as Array)
		{
			if (count _markers == 0) then {
				return true;
			};
		
			{
				if (_position inArea _x) then {
					return true;
				};
			} foreach _markers as String;
			
			return false;
		};
		
		protected override method Run()
		{
			var _briefingEndTime = call PublicVariableHandler.GetBriefingEndTime;
			var _serverTime = call Functions.GetMissionTime;
			
			if (_serverTime < _briefingEndTime + CommonObjects.MissionParametersHandler.MandatoryPrepareTime) then {
				["Insertion is not yet allowed."] call _mMessageHandler.ShowMessage;
			}
			else
			{
				// Open the map and ask player to select a position
				
				//openMap true;
				//mapAnimAdd [1, 0.25, _mMapMarkerHandler.InsertionMapPosition];
				//mapAnimCommit;
				call MapCtrl.OpenDefaultMap;
				var _bBox = [_mInsertionMarkers] call MapCtrl.MarkersBoundingBox;
				[call MapCtrl.DefaultMapControl, _bBox, 150, 500, 1.5, worldSize * 0.7] call MapCtrl.MoveMapToRectangle;

				// Wait for map click
				
				_mWaitingForMapClick = true;
				
				titleText ["<t color='#111199' size='1.3' valign='bottom'><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Select an insertion position in one of the insertion markers.</t>", "PLAIN", -1, true, true];
				//["Select an insertion position inside one of the insertion markers."] call _mMessageHandler.ShowSubTitle;
				
				var _clickedInside = false;
				
				while { !_clickedInside && visibleMap } do
				{
					waitUntil {	!_mWaitingForMapClick || !visibleMap };
					
					if (!_mWaitingForMapClick) then
					{
						if ([_mMapPos, _mInsertionMarkers] call _self.InAnyMarker) then {
							["ServerEventReciever.OnPlayerPerformingInsertion", [playerSide, _mMapPos, true]] call Remote.Invoke;
							_clickedInside = true;
						}
						else {
							titleText ["<t color='#991111' size='1.3' valign='bottom'><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Insertion must be inside one of the dark insertion markers. Please try again.</t>", "PLAIN", -1, true, true];
							//["Insertion must be in the insertion markers. Please try again."] call _mMessageHandler.ShowSubTitle;
							_mWaitingForMapClick = true;
						};
					};
				};
			};
			
			titleFadeOut 1;
			call _base.Run;
		};
	};
};
